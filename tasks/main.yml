---
# installed terraform
- name: Install unzip to unarchive terraform
  package:
    name: unzip
    state: present

- name: Create Terraform directory
  file:
    path: "{{ terraform_dir }}"
    state: directory
  register: terraform_directory

- name: Check terraform version
  shell: "terraform --version 2>&1 | grep {{ terraform_version }}"
  failed_when: false
  changed_when: false
  register: terraform_versions_match

- name: Create Terraform directory
  file:
    path: "{{ terraform_dir }}"
    state: directory
  register: terraform_directory
  when: terraform_versions_match.rc != 0

- name: Download terraform archive Linux 64 bits
  get_url:
    url: https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip
    dest: /tmp/terraform-{{ terraform_version }}.zip
  when: terraform_versions_match.rc != 0

- name: Unarchive Terraform archive
  unarchive:
    src: /tmp/terraform-{{ terraform_version }}.zip
    dest: "{{ terraform_dir }}"
    copy: no
  when: terraform_versions_match.rc != 0 or terraform_directory | changed

- name: Adding terraform command to user path
  file:
    src: "{{ terraform_dir }}/terraform"
    dest: /usr/bin/terraform
    state: link
  when: terraform_versions_match.rc != 0

# got terraform infrastructures for logserver
- name: Create terraform data directory
  file:
    path: "{{ terraform_data_dir }}"
    state: directory

- name: Copy terraform logserver files to host
  copy:
    src: "terraform_logserver/"
    dest: "{{ terraform_data_dir }}/terraform_logserver/"
    force: yes

- name: Create TF files for elasticsearch & proxy
  template:
    src: main.tf.j2
    dest: "{{ terraform_data_dir }}/terraform_logserver/main.tf"

- name: Compile nginx/nginx.conf
  command: bash -c "cat {{ role_path }}/files/nginx/nginx.conf|gzip|base64"
  register: nginx_conf_gz_b64

- name: Compile logstash/02-input.conf
  command: bash -c "cat {{ role_path }}/files/logstash/02-input.conf|gzip|base64"
  register: input_conf_gz_b64

- name: Compile logstash/30-elasticsearch-output.conf
  command: bash -c "cat {{ role_path }}/files/logstash/30-elasticsearch-output.conf|gzip|base64"
  register: elasticsearch_output_conf_gz_b64

- name: Make docker-compose.yml
  template:
      src: docker-compose.yml.j2
      dest: "{{ terraform_data_dir }}/terraform_logserver/shared/docker-compose.yml"

- name: Compile docker-compose.yml
  command: bash -c "cat {{ terraform_data_dir }}/terraform_logserver/shared/docker-compose.yml|gzip|base64"
  register: docker_compose_gz_b64

- name: Create user_data for AWS
  template:
    src: aws_ec2_proxy.sh.j2
    dest: "{{ terraform_data_dir }}/terraform_logserver/shared/aws_ec2_proxy.sh"

# run terraform init
- name: Run the terraform initialization
  command: "terraform init"
  args:
    chdir: "{{ terraform_data_dir }}/terraform_logserver"
    creates: "{{ terraform_data_dir }}/terraform_logserver/.terraform"

# run terraform update modules
- name: Run the terraform update modules
  command: "terraform get -update"
  args:
    chdir: "{{ terraform_data_dir }}/terraform_logserver"

#run terraform apply -auto-approve
- name: Run the logserver installation on AWS
  command: "terraform apply -auto-approve"
  args:
    chdir: "{{ terraform_data_dir }}/terraform_logserver"


