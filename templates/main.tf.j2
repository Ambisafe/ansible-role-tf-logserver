provider "aws" {
    region = "{{ aws_region }}"
}

{% if aws_vpc_default == 'True' %}

resource "aws_default_vpc" "this" {
    tags {
        Name = "Default VPC"
    }
}

resource "aws_default_subnet" "this" {
  availability_zone = "{{ aws_region }}a"

    tags {
        Name = "Default subnet for {{ aws_region }}a"
    }
}
{% endif %}

resource "aws_security_group" "this" {
  description = "security group"

  ingress {
      from_port = 80
      to_port = 80
      protocol = "tcp"
      cidr_blocks = ["{{ aws_cidr_block_from_port_80 }}"]
  }

  ingress {
      from_port = 443
      to_port = 443
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
      from_port = 22
      to_port = 22
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
      from_port = 0
      to_port = 0
      protocol = "-1"
      cidr_blocks = ["0.0.0.0/0"]
  }

{% if aws_vpc_default == 'True' %}
  vpc_id = "${aws_default_vpc.this.id}"
{% else %}
  vpc_id = "{{ aws_vpc_id }}"
{% endif %}

}

data "template_file" "init" {
  template = "${file("shared/aws_ec2_proxy.sh")}"

  vars {
    aws_es_endpoint= "${aws_elasticsearch_domain.es_vpc.endpoint}"
  }
}

data "aws_ami" "this" {
    most_recent = true

    filter {
        name   = "name"
        values = ["amzn-ami-*-amazon-ecs-optimized"]
    }

    owners = ["amazon"]
}

data "aws_iam_policy_document" "this" {
  statement {

    actions = [
       "logs:CreateLogStream",
       "logs:CreateLogGroup",
       "logs:PutLogEvents"
    ]

    resources = [
      "arn:aws:logs:*:*:*",
    ]
  }
}

data "aws_iam_policy_document" "instance-assume-role-policy" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "this" {
  name               = "tf-log-cloudwatch-logs-role"
  assume_role_policy = "${data.aws_iam_policy_document.instance-assume-role-policy.json}"
}

resource "aws_iam_policy" "this" {
  name        = "tf-log-ec2-cw"
  policy      = "${data.aws_iam_policy_document.this.json}"
}

resource "aws_iam_policy_attachment" "this" {
  name       = "tf-log-ec2-cw-attachment"
  roles      = ["${aws_iam_role.this.name}"]
  policy_arn = "${aws_iam_policy.this.arn}"
}

resource "aws_iam_instance_profile" "this" {
  name  = "tf-log-ec2-cw-profile"
  role = "${aws_iam_role.this.name}"
}

resource "aws_eip" "this" {
  instance = "${aws_instance.this.id}"
  vpc      = true
}

resource "aws_key_pair" "this" {
  key_name   = "tf-log-aws-key"
  public_key = "{{ ec2_ssh_public_key }}"
}

resource "aws_instance" "this" {
  iam_instance_profile   = "${aws_iam_instance_profile.this.name}"
  instance_type = "{{ ec2_instance_type }}"
  key_name = "tf-log-aws-key"
  vpc_security_group_ids = [ "${aws_security_group.this.id}" ]
  associate_public_ip_address = true
  user_data = "${data.template_file.init.rendered}"
  tags {
    Name = "tf-log-{{ ec2_name }}"
  }

  ami = "${data.aws_ami.this.id}"
  availability_zone = "{{ aws_region }}a"
}

################ Elasticsearch ################

data "aws_iam_policy_document" "es_vpc_management_access" {
  statement {
    actions = [
      "es:*",
    ]

    resources = [
      "${aws_elasticsearch_domain.es_vpc.arn}",
      "${aws_elasticsearch_domain.es_vpc.arn}/*",
    ]

    principals {
      type = "AWS"

      identifiers = ["*"]
    }
  }
}

resource "aws_elasticsearch_domain" "es_vpc" {
  domain_name           = "tf-log-{{ es_domain_name }}"
  elasticsearch_version = "{{ es_version }}"

  cluster_config {
    instance_type            = "{{ es_instance_type }}"
    instance_count           = "{{ es_instance_count }}"
    zone_awareness_enabled   = "false"
  }

  # advanced_options {
  # }

  vpc_options                    = {
    security_group_ids = ["${aws_security_group.this.id}"]

    {% if aws_vpc_default == 'True' %}
        subnet_ids         = ["${aws_default_subnet.this.id}"]
    {% else %}
        subnet_ids         = ["{{ aws_subnet_id }}"]
    {% endif %}

  }


  ebs_options {
    ebs_enabled = "${ {{ es_volume_size }} > 0 ? true : false}"
    volume_size = "{{ es_volume_size }}"
    volume_type = "gp2"
  }
  snapshot_options {
    automated_snapshot_start_hour = "0"
  }
  tags {
    Domain = "{{ es_domain_name }}"
  }
}

resource "aws_elasticsearch_domain_policy" "es_vpc_management_access" {
  domain_name     = "tf-log-{{ es_domain_name }}"
  access_policies = "${data.aws_iam_policy_document.es_vpc_management_access.json}"
}

################# Log ##################

data "aws_iam_policy_document" "lambda_to_es_document" {
  statement {
    actions = [
      "es:*",
    ]

    resources = [
      "${aws_elasticsearch_domain.es_vpc.arn}",
      "${aws_elasticsearch_domain.es_vpc.arn}/*",
    ]

  }
  statement {
    actions = [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface"
    ]

    resources = [
      "*",
    ]
  }
}

data "aws_iam_policy_document" "lambda-assume-role-policy" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

resource "aws_iam_policy" "lambda_to_es_policy" {
  name        = "tf-log-lambda_to_es_policy"
  policy      = "${data.aws_iam_policy_document.lambda_to_es_document.json}"
}

resource "aws_iam_role" "lambda_to_es_role" {
  name               = "tf-log-lambda_to_es_role"
  assume_role_policy = "${data.aws_iam_policy_document.lambda-assume-role-policy.json}"
}

resource "aws_iam_policy_attachment" "lambda_to_es_attachment" {
  name       = "tf-log-lambda_to_es_attachment"
  roles      = ["${aws_iam_role.lambda_to_es_role.name}"]
  policy_arn = "${aws_iam_policy.lambda_to_es_policy.arn}"
}

resource "aws_cloudwatch_log_group" "logserver" {
  name = "logserver"
  retention_in_days = 90
}

resource "aws_lambda_function" "cw-es-logserver-lambda" {
  function_name = "cw-es-logserver-lambda"
  filename = "cw-es-lambda.zip"
  source_code_hash = "${data.archive_file.cw-es-lambda.output_base64sha256}"
  handler = "index.handler"

  role = "${aws_iam_role.lambda_to_es_role.arn}"
  memory_size = "128"
  runtime = "nodejs4.3"
  timeout = "60"
  vpc_config = {
    security_group_ids = ["${aws_security_group.this.id}"]

    {% if aws_vpc_default == 'True' %}
        subnet_ids         = ["${aws_default_subnet.this.id}"]
    {% else %}
        subnet_ids         = ["{{ aws_subnet_id }}"]
    {% endif %}
  }
}

data "template_file" "cw-es-lambda_function" {
  template = "${file("shared/cw-es-lambda/index.js")}"

  vars {
    aws_es_endpoint= "${aws_elasticsearch_domain.es_vpc.endpoint}"
  }
}

data "archive_file" "cw-es-lambda" {
  type        = "zip"
  source {
    content  = "${data.template_file.cw-es-lambda_function.rendered}"
    filename = "index.js"
  }
  output_path = "cw-es-lambda.zip"
}

resource "aws_lambda_permission" "cw-es-lambda_permission" {
  statement_id = "allow-cloudwatch-lambda"
  action = "lambda:InvokeFunction"
  function_name = "${aws_lambda_function.cw-es-logserver-lambda.arn}"

  principal = "logs.{{ aws_region }}.amazonaws.com"

  source_arn = "${aws_cloudwatch_log_group.logserver.arn}"
}

resource "aws_cloudwatch_log_subscription_filter" "cw-es-lambda-subscription" {
  depends_on = ["aws_lambda_permission.cw-es-lambda_permission"]
  name = "tf-log-cw-es-lambda-subscription"
  log_group_name = "${aws_cloudwatch_log_group.logserver.name}"
  filter_pattern = "[ip, user, username, timestamp, request, status_code, bytes, http_referer, http_user_agent, http_x_forwarded_for]"
  destination_arn = "${aws_lambda_function.cw-es-logserver-lambda.arn}"
}

data "aws_route53_zone" "selected" {
  name         = "{{ route53_domain_name }}"
}

resource "aws_route53_record" "this" {
  zone_id = "${data.aws_route53_zone.selected.zone_id}"
  name    = "{{ route53_prefix_domain_name }}.${data.aws_route53_zone.selected.name}"
  type    = "A"
  ttl     = "300"
  records = ["${aws_eip.this.public_ip}"]
}
