provider "aws" {
    region = "{{ aws_region }}"
}

{% if aws_vpc_default == 'True' %}

resource "aws_default_vpc" "this" {
    tags {
        Name = "Default VPC"
    }
}

resource "aws_default_subnet" "this" {
  availability_zone = "{{ aws_region }}a"

    tags {
        Name = "Default subnet for {{ aws_region }}a"
    }
}
{% endif %}

module "es" {
  source                         = "modules/tf_aws_elasticsearch"
  domain_name                    = "{{ es_domain_name }}"
  es_version                     = "{{ es_version }}"
  vpc_options                    = {
    security_group_ids = ["${aws_security_group.this.id}"]

{% if aws_vpc_default == 'True' %}
    subnet_ids         = ["${aws_default_subnet.this.id}"]
{% else %}
    subnet_ids         = ["{{ aws_subnet_id }}"]
{% endif %}

  }
  instance_count                 = "{{ es_instance_count }}"
  instance_type                  = "{{ es_instance_type }}"
  dedicated_master_type          = false
  es_zone_awareness              = false
  ebs_volume_size                = "{{ es_volume_size }}"

}

resource "aws_security_group" "this" {
  description = "security group"

  ingress {
      from_port = 80
      to_port = 80
      protocol = "tcp"
      cidr_blocks = ["{{ aws_cidr_block_from_port_80 }}"]
  }

  ingress {
      from_port = 5044
      to_port = 5044
      protocol = "tcp"
      cidr_blocks = ["{{ aws_cidr_block_from_port_80 }}"]
  }

  ingress {
      from_port = 443
      to_port = 443
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
      from_port = 22
      to_port = 22
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
      from_port = 0
      to_port = 0
      protocol = "-1"
      cidr_blocks = ["0.0.0.0/0"]
  }

{% if aws_vpc_default == 'True' %}
  vpc_id = "${aws_default_vpc.this.id}"
{% else %}
  vpc_id = "{{ aws_vpc_id }}"
{% endif %}

}

data "template_file" "init" {
  template = "${file("shared/aws_ec2_proxy.sh")}"

  vars {
    aws_es_vpc = "${module.es.endpoint}"
  }
}

data "aws_ami" "this" {
    most_recent = true

    filter {
        name   = "name"
        values = ["amzn-ami-*-amazon-ecs-optimized"]
    }

    owners = ["amazon"]
}

resource "aws_eip" "this" {
  instance = "${aws_instance.this.id}"
  vpc      = true
}

resource "aws_key_pair" "this" {
  key_name   = "awx key"
  public_key = "{{ ec2_ssh_public_key }}"
}

resource "aws_instance" "this" {
  instance_type = "{{ ec2_instance_type }}"
  key_name = "awx key"
  vpc_security_group_ids = [ "${aws_security_group.this.id}" ]
  associate_public_ip_address = true
  user_data = "${data.template_file.init.rendered}"
  tags {
    Name = "{{ ec2_name }}"
  }

  ami = "${data.aws_ami.this.id}"
  availability_zone = "{{ aws_region }}a"
}
